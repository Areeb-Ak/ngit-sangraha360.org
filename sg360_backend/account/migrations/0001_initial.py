# Generated by Django 5.0.3 on 2024-04-25 04:20

import account.manager
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DataEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('pslist_nproc', models.FloatField(blank=True, null=True)),
                ('pslist_avg_threads', models.FloatField(blank=True, null=True)),
                ('pslist_nprocs64bit', models.FloatField(blank=True, null=True)),
                ('handles_nfile', models.FloatField(blank=True, null=True)),
                ('handles_nthread', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_load', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_init', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_mem', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_load_avg', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_init_avg', models.FloatField(blank=True, null=True)),
                ('ldrmodules_not_in_mem_avg', models.FloatField(blank=True, null=True)),
                ('malfind_ninjections', models.FloatField(blank=True, null=True)),
                ('malfind_commitCharge', models.FloatField(blank=True, null=True)),
                ('malfind_protection', models.FloatField(blank=True, null=True)),
                ('malfind_uniqueInjections', models.FloatField(blank=True, null=True)),
                ('svcscan_nservices', models.FloatField(blank=True, null=True)),
                ('svcscan_kernel_drivers', models.FloatField(blank=True, null=True)),
                ('svcscan_fs_drivers', models.FloatField(blank=True, null=True)),
                ('svcscan_process_services', models.FloatField(blank=True, null=True)),
                ('svcscan_shared_process_services', models.FloatField(blank=True, null=True)),
                ('svcscan_interactive_process_services', models.FloatField(blank=True, null=True)),
                ('svcscan_nactive', models.FloatField(blank=True, null=True)),
                ('callbacks_ncallbacks', models.FloatField(blank=True, null=True)),
                ('callbacks_nanonymous', models.FloatField(blank=True, null=True)),
                ('callbacks_ngeneric', models.FloatField(blank=True, null=True)),
                ('Memory_PssTotal', models.FloatField(blank=True, null=True)),
                ('MemoryPssClean', models.FloatField(blank=True, null=True)),
                ('MemorySharedDirty', models.FloatField(blank=True, null=True)),
                ('MemoryPrivateDirty', models.FloatField(blank=True, null=True)),
                ('MemorySharedClean', models.FloatField(blank=True, null=True)),
                ('MemoryPrivateClean', models.FloatField(blank=True, null=True)),
                ('MemoryHeapSize', models.FloatField(blank=True, null=True)),
                ('MemoryHeapAlloc', models.FloatField(blank=True, null=True)),
                ('MemoryHeapFree', models.FloatField(blank=True, null=True)),
                ('MemoryParcelMemory', models.FloatField(blank=True, null=True)),
                ('totalReceivedBytes', models.FloatField(blank=True, null=True)),
                ('totalReceivedPackets', models.FloatField(blank=True, null=True)),
                ('totalTransmittedBytes', models.FloatField(blank=True, null=True)),
                ('totalTransmittedPackets', models.FloatField(blank=True, null=True)),
                ('APICall', models.TextField(blank=True)),
                ('Permission', models.TextField(blank=True)),
                ('URL', models.TextField(blank=True)),
                ('Provider', models.TextField(blank=True)),
                ('Feature', models.TextField(blank=True)),
                ('Intent', models.TextField(blank=True)),
                ('Activity', models.TextField(blank=True)),
                ('Call', models.TextField(blank=True)),
                ('ServiceReceiver', models.TextField(blank=True)),
                ('RealPermission', models.TextField(blank=True)),
                ('Time', models.DateTimeField(blank=True, null=True)),
                ('model_predict', models.CharField(blank=True, max_length=100)),
                ('manual_predict', models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.TextField(blank=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('otp', models.CharField(blank=True, max_length=6, null=True)),
                ('last_login_time', models.DateTimeField(blank=True, null=True)),
                ('last_logout_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', account.manager.UserManager()),
            ],
        ),
    ]
